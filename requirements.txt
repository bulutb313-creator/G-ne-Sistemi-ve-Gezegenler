# Gerekli Kütüphaneler Listesi (Streamlit Cloud Uyumlu)
langchain
langchain-community

# Gemini Modelleri (Generation ve Embedding)
google-genai
langchain-google-genai

# Veri İşleme
pypdf
pdfplumber

# Vektör Veritabanı
chromadb

# Web Arayüzü (Sunum)
streamlit

# 2.2 Vektör Veritabanı Kurulumu ve RAG Testi
# Bu blok, 'sistem.pdf'i okur, parçalar ve RAG'in çalıştığını kanıtlar.
import os
from langchain_google_genai import ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain_community.vectorstores import Chroma
from langchain.docstore.document import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.retrievers import MultiQueryRetriever
import pdfplumber 

vectorstore = None
PDF_DOSYA_ADI = "sistem.pdf"
file_path = PDF_DOSYA_ADI

if os.path.exists(file_path) and os.environ.get('GOOGLE_API_KEY'):
    try:
        # Metin Çıkarma, Parçalama ve Vektör Veritabanı Oluşturma
        full_text = "";
        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages: full_text += page.extract_text() + "\n\n"
        documents = [Document(page_content=full_text, metadata={"source": file_path})]
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200, separators=["\n\n", "\n", " ", ""],)
        texts = text_splitter.split_documents(documents)
        
        embedding_model = GoogleGenerativeAIEmbeddings(model="text-embedding-004")
        vectorstore = Chroma.from_documents(documents=texts, embedding=embedding_model)
        print(f"✅ Vektör veritabanı kuruldu. {len(texts)} parça oluşturuldu.")

        # RAG Zinciri Kurulumu ve Test
        llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", temperature=0.2)
        base_retriever = vectorstore.as_retriever(search_kwargs={"k": 12})
        retriever = MultiQueryRetriever.from_llm(retriever=base_retriever, llm=llm)

        prompt_template = """Sen bir GÜNEŞ SİSTEMİ VE JEOFIZIK UZMANISIN. Görevin, sana verilen BAĞLAM'daki TÜM bilgileri kullanarak bir cevap SENTEZLEMEKTİR. Asla hemen "bilmiyorum" deme. Cevap verebilmek için, çekilen bağlamdaki bilgileri dikkatlice oku, neden-sonuç ilişkilerini kur ve TÜM İLGİLİ DETAYLARI maddeler halinde veya akıcı paragraflarla aktar.
        Eğer BAĞLAM, soruyu cevaplamak için KESİNLİKLE YETERSİZ veya EKSİK ise, bu durumda sadece "Bu konuda elimde yeterli bilgi yok." diye cevap ver.
        BAĞLAM: {context}
        Soru: {question}
        Cevap:"""
        PROMPT = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
        qa_chain = RetrievalQA.from_chain_type(llm=llm, chain_type="stuff", retriever=retriever, chain_type_kwargs={"prompt": PROMPT})
        
        test_sorusu = "Dünya'nın iç katmanlarının (Litosfer, Astenosfer, Mezosfer, Barisfer) temel fiziksel ve kimyasal özelliklerini ve aralarındaki geçiş sınırlarını detaylıca listeler misin?"
        cevap = qa_chain.invoke(test_sorusu)

        print("\n--- RAG TEST SONUCU (ÇALIŞMA KANITI) ---")
        print(f"Cevap: {cevap['result'][:400]}...")
        print("-----------------------------------------")

    except Exception as e:
        print(f"❌ KRİTİK HATA: Veri işleme/RAG zinciri kurma hatası: {e}")
