langchain
langchain-community
google-genai
langchain-google-genai
chromadb
streamlit
pdfplumber

print("✅ requirements.txt dosyası hatasız olarak oluşturuldu.")

# 2.2 Vektör Veritabanı Kurulumu ve Gelişmiş RAG Testi
# Hata yakalama mekanizmaları eklendi.
import os
from langchain_google_genai import ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain_community.vectorstores import Chroma
from langchain.docstore.document import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.retrievers import MultiQueryRetriever
import pdfplumber 

print("\n--- ADIM 2: RAG TESTİ ---")
PDF_DOSYA_ADI = "sistem.pdf"
file_path = PDF_DOSYA_ADI

if not os.path.exists(file_path):
    print(f"❌ HATA: '{file_path}' dosyası bulunamadı. Lütfen yükleyin.")
    sys.exit(1)

try:
    # 1. Veri İşleme
    full_text = "";
    with pdfplumber.open(file_path) as pdf:
        for page in pdf.pages: full_text += page.extract_text() + "\n\n"
    documents = [Document(page_content=full_text, metadata={"source": file_path})]
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, overlap=200, separators=["\n\n", "\n", " ", ""],)
    texts = text_splitter.split_documents(documents)
    
    embedding_model = GoogleGenerativeAIEmbeddings(model="text-embedding-004")
    vectorstore = Chroma.from_documents(documents=texts, embedding=embedding_model)
    print(f"✅ Vektör veritabanı kuruldu. {len(texts)} parça oluşturuldu.")

    # 2. RAG Zinciri Kurulumu (Analitik Prompt ile)
    llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", temperature=0.2)
    base_retriever = vectorstore.as_retriever(search_kwargs={"k": 12})
    retriever = MultiQueryRetriever.from_llm(retriever=base_retriever, llm=llm)

    # PROMPT GÜNCELLEMESİ: ANALİTİK DÜŞÜNMEYE ZORLAMA
    prompt_template = """Sen bir GÜNEŞ SİSTEMİ VE JEOFIZIK UZMANISIN. Görevin, sana verilen BAĞLAM'daki bilgileri ANALİZ EDEREK bir cevap SENTEZLEMEKTİR. Neden-sonuç ilişkileri kur, kıyaslamalar yap ve mantıksal çıkarımlar sun.

    Eğer cevap KESİNLİKLE BAĞLAM'da yoksa, sadece "Bu konuda elimde yeterli bilgi yok." diye cevap ver.
    BAĞLAM: {context}
    Soru: {question}
    Cevap:"""
    PROMPT = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    qa_chain = RetrievalQA.from_chain_type(llm=llm, chain_type="stuff", retriever=retriever, chain_type_kwargs={"prompt": PROMPT})
    
    # 3. Analitik Test
    test_sorusu = "Dünya ve Venüs'ün iç katmanlarının oluşumunu ve sıcaklıklarını kıyaslayarak neden yaşam koşullarının birbirinden bu kadar farklı olduğunu ANALİZ ET."
    cevap = qa_chain.invoke(test_sorusu)

    print("\n--- ANALİTİK RAG TEST SONUCU ---")
    print(f"Soru: {test_sorusu}")
    print(f"Cevap: {cevap['result']}")
    print("-----------------------------------------")

except Exception as e:
    print(f"❌ KRİTİK HATA: RAG zinciri kurma veya çalıştırma hatası: {e}")
    sys.exit(1)
